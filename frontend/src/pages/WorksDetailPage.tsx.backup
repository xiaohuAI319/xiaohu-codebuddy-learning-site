import React, { useEffect, useState, useCallback } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';

import UpgradePrompt from '../components/UpgradePrompt';
import { EyeIcon, StarIcon, LockClosedIcon, ArrowTopRightOnSquareIcon, ShareIcon, DocumentDuplicateIcon } from '@heroicons/react/24/outline';

interface Work {
  id: string;
  title: string;
  description: string;
  author: {
    nickname: string;
    currentLevel: string;
  };
  category: string;
  tags: string[];
  coverImage: string;
  votes: number;
  views: number;
  isTopPinned: boolean;
  requiredLevel: string;
  visibility: 'public' | 'members_only';
  prompt?: string;
  repositoryUrl?: string;
  content: {
    preview: string;
    basic?: string;
    advanced?: string;
    premium?: string;
    sourceCode?: string;
  };
  createdAt: string;
  link?: string;
  htmlFile?: string;
}

interface User {
  id: string;
  currentLevel: string;
  role: string;
}

const WorksDetailPage: React.FC = () => {
  const { slug } = useParams();
  const navigate = useNavigate();
  const { user } = useAuth();
  const [work, setWork] = useState<Work | null>(null);
  const [upgradePrompt, setUpgradePrompt] = useState<{ show: boolean; requiredLevel: string; feature: string }>({ show: false, requiredLevel: '', feature: '' });
  const [loading, setLoading] = useState(true);

  const apiOrigin = window.location.origin.includes(':3000')
    ? window.location.origin.replace(':3000', ':5000')
    : window.location.origin;

  const buildPreviewUrl = useCallback((w: any): string => {
    const previewSrc = (w.link && /^https?:\/\//i.test(String(w.link))) ? String(w.link) : String(w.htmlFile || '');
    const previewPath = previewSrc.replace(/\\/g, '/').replace(/^\/+/, '');
    const uploadsMatch = previewPath.match(/uploads\/[^/\\]+\/[^/\\]+\.html?$/i) || previewPath.match(/uploads\/.*\.html?$/i);
    const pathForUrl = uploadsMatch ? uploadsMatch[0].replace(/^\/+/, '') : previewPath;
    return previewSrc.startsWith('http') ? previewSrc : (pathForUrl ? `${apiOrigin}/${pathForUrl}` : '');
  }, [apiOrigin]);

  
  const fetchWork = useCallback(async () => {
    if (!slug) return;
    try {
      const token = localStorage.getItem('token');
      const headers: any = {};
      if (token) headers.Authorization = `Bearer ${token}`;

      // 尝试获取单条作品详情，如果后端暂未提供该接口，可回落到列表筛选逻辑（后续需要可补）
      const res = await fetch(`/api/works/slug/${slug}`, { headers });
      if (res.ok) {
        const data = await res.json();
        const w = data?.data || data; // 兼容不同返回结构
        const coverRaw = String(w.coverImage || '').replace(/\\/g, '/');
        const normPath = coverRaw.replace(/^\/+/, '');
        const coverUrl = normPath.startsWith('http')
          ? normPath
          : (window.location.origin.includes(':3000') ? `/${normPath}` : `${apiOrigin}/${normPath}`);
        const previewUrl = buildPreviewUrl(w);

        const normalized: Work = {
          id: String(w.slug || slug || w.id || ''),
          title: w.title || '作品',
          description: w.description || '',
          author: (w.author && typeof w.author === 'object') ? w.author : { nickname: '作者', currentLevel: '学员' },
          category: (w.category === 'web' ? 'regular' : (w.category || 'regular')),
          tags: Array.isArray(w.tags) ? w.tags : [],
          coverImage: coverUrl,
          votes: Number(w.votes || 0),
          views: Number(w.views || 0),
          isTopPinned: Boolean(w.isTopPinned || w.isPinned),
          requiredLevel: w.requiredLevel || '学员',
          visibility: (w.visibility === 'members_only' ? 'members_only' : 'public'),
          content: {
            preview: previewUrl,
          },
          prompt: w.prompt,
          repositoryUrl: w.repositoryUrl,
          createdAt: w.createdAt || new Date().toISOString(),
          link: w.link,
          htmlFile: w.htmlFile
        };
        setWork(normalized);
      } else {
        // 回退策略：如果没有详情接口，可回退到列表（后续可优化）
        setWork(null);
      }
    } catch (e) {
      console.error('获取作品详情失败:', e);
    } finally {
      setLoading(false);
    }
  }, [slug, apiOrigin, buildPreviewUrl]);

  useEffect(() => { fetchWork(); }, [fetchWork]);

  const canUserAccessContent = (contentLevel: string): boolean => {
    if (!user) return contentLevel === 'preview';
    if (user.role === 'admin') return true;
    if (work && work.author.nickname === user.id) return true;

    const contentLevels = ['preview', 'prompt', 'sourceCode'];
    const contentIndex = contentLevels.indexOf(contentLevel);
    switch (user.currentLevel) {
      case '用户': return contentIndex <= 0; // 只能看预览
      case '学员': return contentIndex <= 1; // 可以看预览和提示词
      case '高级学员':
      case '讲师': return true; // 可以看所有内容
      default: return contentIndex === 0; // 默认只能看预览
    }
  };

  const handleOpenPreview = () => {
    if (!work) return;
    const url = work.content?.preview || '';
    if (!url) {
      console.log('暂无预览内容');
      return;
    }
    window.open(url, '_blank');
  };

  const handleCopyPrompt = () => {
    if (!work?.prompt) return;
    navigator.clipboard.writeText(work.prompt).then(() => {
      alert('提示词已复制到剪贴板');
    }).catch(() => {
      alert('复制失败，请手动复制');
    });
  };

  const handleVote = async () => {
    console.log('详情页投票点击 - 用户信息:', user);
    if (!user) {
      alert('请先登录后再投票');
      return;
    }

    // 检查用户权限：只有用户级别及以上才能投票
    const canVoteLevels = ['用户', '学员', '高级学员', '讲师', '管理员'];
    if (!canVoteLevels.includes(user.currentLevel)) {
      setUpgradePrompt({ show: true, requiredLevel: '用户', feature: '投票功能' });
      return;
    }

    if (!work) {
      return;
    }

    // 检查是否是自己的作品
    if (work.author.nickname === user.nickname) {
      setUpgradePrompt({ show: true, requiredLevel: '', feature: '不能给自己的作品投票' });
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const res = await fetch(`/api/works/${work.id}/vote`, { method: 'POST', headers: { Authorization: `Bearer ${token}` } });
      if (res.ok) {
        // 简单刷新票数：重新拉取详情
        fetchWork();
      } else if (res.status === 403) {
        // 后端权限检查失败，显示升级提示
        setUpgradePrompt({ show: true, requiredLevel: '用户', feature: '投票功能' });
      }
    } catch (e) {
      console.error('投票失败:', e);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!work) {
    return (
      <div className="space-y-4">
        <button onClick={() => navigate(-1)} className="text-sm text-blue-600 hover:text-blue-700">返回列表</button>
        <div className="text-gray-600">未找到该作品或暂不支持详情查看。</div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <button onClick={() => navigate(-1)} className="text-sm text-blue-600 hover:text-blue-700">返回列表</button>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* 左侧主内容 */}
        <div className="lg:col-span-2 space-y-4">
          {/* 顶部信息条 */}
          <div className="flex items-center justify-between">
            <div className="space-y-1">
              <h1 className="text-2xl font-bold text-gray-900">{work.title}</h1>
              <div className="flex items-center gap-2 text-sm">
                <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full">
                  {work.category === 'regular' ? '平时作品' : (work.category === 'camp1' ? 'AI编程训练营即将开启' : '全部作品')}
                </span>
                <span className="text-gray-500">{new Date(work.createdAt).toLocaleDateString()}</span>
                {work.isTopPinned && (
                  <span className="bg-red-100 text-red-700 px-2 py-1 rounded-full">置顶</span>
                )}
              </div>
            </div>

          </div>

          {/* 封面与查看作品 */}
          <div className="bg-white rounded-lg shadow-md overflow-hidden">
            <img
              src={work.coverImage || '/logo192.png'}
              onError={(e) => { e.currentTarget.src = '/logo192.png'; }}
              alt={work.title}
              className="w-full h-64 object-contain bg-gray-50"
            />
            <div className="p-4 flex items-center justify-between">
              {work.visibility === 'members_only' && <LockClosedIcon className="w-4 h-4 text-yellow-600" />}
            </div>
          </div>

          {/* 作品介绍 */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">作品介绍</h2>
            <p className="text-gray-700 whitespace-pre-line">{work.description || '暂无简介'}</p>
            <div className="mt-4 flex flex-wrap gap-2">
              {work.tags.map((tag, idx) => (
                <span key={idx} className="text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded">{tag}</span>
              ))}
            </div>
          </div>

          {/* 作品操作区 */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-4">作品操作</h2>
            <div className="flex gap-4">
              {work.content?.preview && (
                <button
                  onClick={handleOpenPreview}
                  className="flex-1 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 font-medium flex items-center justify-center"
                >
                  <EyeIcon className="w-5 h-5 mr-2" />
                  查看作品
                </button>
              )}
              <button
                onClick={() => {
                  if (navigator.share) {
                    navigator.share({
                      title: work.title,
                      text: work.description,
                      url: window.location.href
                    });
                  } else {
                    // 如果不支持分享API，复制链接
                    navigator.clipboard.writeText(window.location.href).then(() => {
                      alert('链接已复制到剪贴板');
                    });
                  }
                }}
                className="flex-1 px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 font-medium flex items-center justify-center"
              >
                <ShareIcon className="w-5 h-5 mr-2" />
                分享作品
              </button>
            </div>
          </div>

          {/* 作品提示词 */}
          <div className="bg-white rounded-lg shadow-md p-6">
            <h2 className="text-lg font-semibold text-gray-900 mb-2">作品提示词</h2>
            {canUserAccessContent('prompt') ? (
              <div className="space-y-3">
                <div className="bg-gray-50 p-4 rounded-lg">
                  <p className="text-gray-700 whitespace-pre-line">{work.prompt || '暂无提示词'}</p>
                </div>
                {work.prompt && (
                  <button
                    onClick={handleCopyPrompt}
                    className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 text-sm flex items-center"
                  >
                    <DocumentDuplicateIcon className="w-4 h-4 mr-2" />
                    复制提示词
                  </button>
                )}
              </div>
            ) : (
              <div className="bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-300">
                <div className="flex items-center justify-center text-gray-500">
                  <LockClosedIcon className="w-5 h-5 mr-2" />
                  <span>提示词需要学员权限查看</span>
                </div>
                <div className="mt-3 text-center">
                  <button
                    onClick={() => setUpgradePrompt({ show: true, requiredLevel: '学员', feature: '查看提示词' })}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
                  >
                    立即升级
                  </button>
                </div>
              </div>
            )}
          </div>

          {/* 源码链接 */}
          {work.repositoryUrl && (
            <div className="bg-white rounded-lg shadow-md p-6">
              <h2 className="text-lg font-semibold text-gray-900 mb-2">源码链接</h2>
              {canUserAccessContent('sourceCode') ? (
                <div className="space-y-3">
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="text-sm text-gray-600 mb-2">源码仓库地址：</p>
                    <a
                      href={work.repositoryUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 break-all"
                    >
                      {work.repositoryUrl}
                    </a>
                  </div>
                  <a
                    href={work.repositoryUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                  >
                    <ArrowTopRightOnSquareIcon className="w-4 h-4 mr-2" />
                    跳转源码仓库
                  </a>
                </div>
              ) : (
                <div className="bg-gray-50 p-4 rounded-lg border-2 border-dashed border-gray-300">
                  <div className="flex items-center justify-center text-gray-500">
                    <LockClosedIcon className="w-5 h-5 mr-2" />
                    <span>源码需要高级学员权限查看</span>
                  </div>
                  <div className="mt-3 text-center">
                    <button
                      onClick={() => setUpgradePrompt({ show: true, requiredLevel: '高级学员', feature: '查看源码' })}
                      className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm"
                    >
                      立即升级
                    </button>
                  </div>
                </div>
              )}
            </div>
          )}
        </div>

        {/* 右侧信息卡 */}
        <div className="space-y-4">
          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-sm font-semibold text-gray-900 mb-3">作者信息</h3>
            <div className="flex items-center gap-3">
              <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                <span className="text-sm text-blue-600">{work.author.nickname[0]}</span>
              </div>
              <div>
                <p className="text-sm font-medium text-gray-900">{work.author.nickname}</p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-sm font-semibold text-gray-900 mb-3">作品信息</h3>
            <div className="text-sm text-gray-700 space-y-1">
              <div>作品类型：{work.link ? '绝对URL' : (work.htmlFile ? 'HTML文件' : '未知')}</div>
              <div>发布时间：{new Date(work.createdAt).toLocaleDateString()}</div>
              <div>所属分类：{work.category === 'regular' ? '平时作品' : (work.category === 'camp1' ? 'AI编程训练营即将开启' : '全部作品')}</div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow-md p-4">
            <h3 className="text-sm font-semibold text-gray-900 mb-3">为作品投票</h3>
            <div className="flex items-center justify-between">
              <span className="text-sm text-gray-700">当前票数：{work.votes}</span>
              <button
                onClick={handleVote}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 text-sm font-medium"
              >
                投票
              </button>
            </div>
          </div>
        </div>
      </div>

      {upgradePrompt.show && (
        <UpgradePrompt
          currentLevel={user?.currentLevel || '游客'}
          requiredLevel={upgradePrompt.requiredLevel}
          feature={upgradePrompt.feature}
          onClose={() => setUpgradePrompt({ show: false, requiredLevel: '', feature: '' })}
        />
      )}
    </div>
  );
};

export default WorksDetailPage;